# E-commerce Backend API Specification & Implementation

## Table of Contents
1. [Project Structure](#project-structure)
2. [Database Models](#database-models)
3. [API Endpoints](#api-endpoints)
4. [Authentication & Security](#authentication--security)
5. [Implementation Plan](#implementation-plan)
6. [Testing Strategy](#testing-strategy)
7. [Deployment Recommendations](#deployment-recommendations)

## Project Structure

```
ecommerce_api/
│
├── ecommerce_api/              # Main project directory
│   ├── __init__.py
│   ├── settings.py             # Project settings
│   ├── urls.py                 # Main URL routing
│   ├── asgi.py                 # ASGI config
│   └── wsgi.py                 # WSGI config
│
├── authentication/             # User authentication app
│   ├── models.py               # Custom User model
│   ├── serializers.py          # User serializers
│   ├── views.py                # Auth views
│   ├── urls.py                 # Auth URLs
│   └── tests.py                # Auth tests
│
├── products/                   # Products app
│   ├── models.py               # Product-related models
│   ├── serializers.py          # Product serializers
│   ├── views.py                # Product views
│   ├── urls.py                 # Product URLs
│   └── tests.py                # Product tests
│
├── orders/                     # Orders app
│   ├── models.py               # Order-related models
│   ├── serializers.py          # Order serializers
│   ├── views.py                # Order views
│   ├── urls.py                 # Order URLs
│   └── tests.py                # Order tests
│
├── payments/                   # Payments app
│   ├── models.py               # Payment models
│   ├── serializers.py          # Payment serializers
│   ├── views.py                # Payment views
│   ├── urls.py                 # Payment URLs
│   ├── gateways/               # Payment gateway integrations
│   └── tests.py                # Payment tests
│
├── shipping/                   # Shipping app
│   ├── models.py               # Shipping models
│   ├── serializers.py          # Shipping serializers
│   ├── views.py                # Shipping views
│   ├── urls.py                 # Shipping URLs
│   └── tests.py                # Shipping tests
│
├── analytics/                  # Analytics app
│   ├── models.py               # Analytics models
│   ├── serializers.py          # Analytics serializers
│   ├── views.py                # Analytics views
│   ├── urls.py                 # Analytics URLs
│   └── reports/                # Report generators
│
├── common/                     # Shared utilities and mixins
│   ├── models.py               # Base models
│   ├── utils.py                # Utility functions
│   └── permissions.py          # Custom permissions
│
└── requirements.txt            # Project dependencies
```

## Database Models

### Authentication App

```python
# authentication/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _

class User(AbstractUser):
    email = models.EmailField(_('email address'), unique=True)
    phone = models.CharField(max_length=15, blank=True, null=True)
    is_staff_member = models.BooleanField(default=False)
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')
        
    def __str__(self):
        return self.email


class Address(models.Model):
    user = models.ForeignKey(User, related_name='addresses', on_delete=models.CASCADE)
    address_line1 = models.CharField(max_length=255)
    address_line2 = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=100)
    state = models.CharField(max_length=100)
    country = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=20)
    is_default = models.BooleanField(default=False)
    
    class Meta:
        verbose_name_plural = 'Addresses'

    def __str__(self):
        return f"{self.address_line1}, {self.city}"
```

### Products App

```python
# products/models.py
from django.db import models
from django.utils.text import slugify
from common.models import TimestampedModel

class Category(TimestampedModel):
    name = models.CharField(max_length=100)
    slug = models.SlugField(max_length=120, unique=True)
    description = models.TextField(blank=True, null=True)
    parent = models.ForeignKey('self', related_name='children', 
                              on_delete=models.CASCADE, blank=True, null=True)
    image = models.ImageField(upload_to='categories/', blank=True, null=True)
    
    class Meta:
        verbose_name_plural = 'Categories'
        
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
        
    def __str__(self):
        return self.name


class Product(TimestampedModel):
    name = models.CharField(max_length=255)
    slug = models.SlugField(max_length=280, unique=True)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    compare_price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    cost_price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    categories = models.ManyToManyField(Category, related_name='products')
    is_active = models.BooleanField(default=True)
    sku = models.CharField(max_length=50, unique=True)
    stock_quantity = models.IntegerField(default=0)
    low_stock_threshold = models.IntegerField(default=10)
    weight = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.name
    
    @property
    def is_in_stock(self):
        return self.stock_quantity > 0
    
    @property
    def is_low_stock(self):
        return 0 < self.stock_quantity <= self.low_stock_threshold


class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='products/')
    alt_text = models.CharField(max_length=255, blank=True)
    is_featured = models.BooleanField(default=False)
    order = models.PositiveIntegerField(default=1)
    
    class Meta:
        ordering = ['order']
    
    def __str__(self):
        return f"Image for {self.product.name}"


class ProductVariation(models.Model):
    product = models.ForeignKey(Product, related_name='variations', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)  # e.g., "Size", "Color"
    value = models.CharField(max_length=100)  # e.g., "Small", "Red"
    price_adjustment = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    stock_quantity = models.IntegerField(default=0)
    sku = models.CharField(max_length=50, unique=True)
    
    class Meta:
        unique_together = ('product', 'name', 'value')
        
    def __str__(self):
        return f"{self.product.name} - {self.name}: {self.value}"
    
    @property
    def is_in_stock(self):
        return self.stock_quantity > 0


class ProductReview(TimestampedModel):
    product = models.ForeignKey(Product, related_name='reviews', on_delete=models.CASCADE)
    user = models.ForeignKey('authentication.User', related_name='reviews', on_delete=models.CASCADE)
    rating = models.PositiveSmallIntegerField()  # 1-5 stars
    title = models.CharField(max_length=255, blank=True)
    comment = models.TextField()
    is_approved = models.BooleanField(default=False)
    
    class Meta:
        unique_together = ('product', 'user')
        
    def __str__(self):
        return f"Review for {self.product.name} by {self.user.username}"
```

### Orders App

```python
# orders/models.py
from django.db import models
from common.models import TimestampedModel

class Cart(TimestampedModel):
    user = models.ForeignKey('authentication.User', related_name='carts', 
                           on_delete=models.CASCADE, null=True, blank=True)
    session_id = models.CharField(max_length=255, null=True, blank=True)
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return f"Cart {self.id} - {'User: ' + self.user.username if self.user else 'Guest'}"
    
    @property
    def total_price(self):
        return sum(item.total_price for item in self.items.all())


class CartItem(models.Model):
    cart = models.ForeignKey(Cart, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey('products.Product', related_name='cart_items', on_delete=models.CASCADE)
    variation = models.ForeignKey('products.ProductVariation', related_name='cart_items', 
                                on_delete=models.SET_NULL, null=True, blank=True)
    quantity = models.PositiveIntegerField(default=1)
    
    class Meta:
        unique_together = ('cart', 'product', 'variation')
    
    def __str__(self):
        return f"{self.quantity} x {self.product.name} in Cart {self.cart.id}"
    
    @property
    def unit_price(self):
        base_price = self.product.price
        if self.variation:
            base_price += self.variation.price_adjustment
        return base_price
    
    @property
    def total_price(self):
        return self.unit_price * self.quantity


class Order(TimestampedModel):
    ORDER_STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('shipped', 'Shipped'),
        ('delivered', 'Delivered'),
        ('cancelled', 'Cancelled'),
        ('refunded', 'Refunded'),
    )
    
    user = models.ForeignKey('authentication.User', related_name='orders', 
                           on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=20, choices=ORDER_STATUS_CHOICES, default='pending')
    shipping_address = models.ForeignKey('authentication.Address', related_name='shipping_orders',
                                       on_delete=models.SET_NULL, null=True)
    billing_address = models.ForeignKey('authentication.Address', related_name='billing_orders',
                                      on_delete=models.SET_NULL, null=True)
    shipping_method = models.ForeignKey('shipping.ShippingMethod', related_name='orders',
                                      on_delete=models.SET_NULL, null=True)
    tracking_number = models.CharField(max_length=255, null=True, blank=True)
    subtotal = models.DecimalField(max_digits=10, decimal_places=2)
    shipping_cost = models.DecimalField(max_digits=10, decimal_places=2)
    tax = models.DecimalField(max_digits=10, decimal_places=2)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total = models.DecimalField(max_digits=10, decimal_places=2)
    notes = models.TextField(blank=True, null=True)
    order_number = models.CharField(max_length=20, unique=True)
    
    def __str__(self):
        return f"Order #{self.order_number}"
    
    def save(self, *args, **kwargs):
        if not self.order_number:
            # Generate order number logic goes here
            last_order = Order.objects.order_by('-id').first()
            order_id = last_order.id + 1 if last_order else 1
            self.order_number = f"ORD-{order_id:08d}"
        super().save(*args, **kwargs)


class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey('products.Product', related_name='order_items', on_delete=models.SET_NULL, null=True)
    variation = models.ForeignKey('products.ProductVariation', related_name='order_items', 
                                on_delete=models.SET_NULL, null=True, blank=True)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)  # Price at time of purchase
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    product_name = models.CharField(max_length=255)  # Store product name at time of purchase
    product_sku = models.CharField(max_length=50)  # Store SKU at time of purchase
    variation_name = models.CharField(max_length=255, null=True, blank=True)  # Store variation details
    
    def __str__(self):
        return f"{self.quantity} x {self.product_name} in Order #{self.order.order_number}"
```

### Payments App

```python
# payments/models.py
from django.db import models
from common.models import TimestampedModel

class Payment(TimestampedModel):
    PAYMENT_STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('refunded', 'Refunded'),
        ('cancelled', 'Cancelled'),
    )
    
    PAYMENT_METHOD_CHOICES = (
        ('credit_card', 'Credit Card'),
        ('paypal', 'PayPal'),
        ('stripe', 'Stripe'),
        ('bank_transfer', 'Bank Transfer'),
        ('cod', 'Cash on Delivery'),
    )
    
    order = models.ForeignKey('orders.Order', related_name='payments', on_delete=models.CASCADE)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=PAYMENT_STATUS_CHOICES, default='pending')
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHOD_CHOICES)
    transaction_id = models.CharField(max_length=255, null=True, blank=True)
    payment_details = models.JSONField(null=True, blank=True)  # Store gateway-specific details
    
    def __str__(self):
        return f"Payment for Order #{self.order.order_number}"


class Refund(TimestampedModel):
    REFUND_STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
        ('completed', 'Completed'),
    )
    
    payment = models.ForeignKey(Payment, related_name='refunds', on_delete=models.CASCADE)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    reason = models.TextField()
    status = models.CharField(max_length=20, choices=REFUND_STATUS_CHOICES, default='pending')
    refund_transaction_id = models.CharField(max_length=255, null=True, blank=True)
    
    def __str__(self):
        return f"Refund for Payment {self.payment.id}"
```

### Shipping App

```python
# shipping/models.py
from django.db import models
from common.models import TimestampedModel

class ShippingMethod(TimestampedModel):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    is_active = models.BooleanField(default=True)
    delivery_time = models.CharField(max_length=100, help_text="E.g., '2-3 business days'")
    
    def __str__(self):
        return self.name


class ShippingZone(models.Model):
    name = models.CharField(max_length=100)
    countries = models.JSONField(help_text="List of country codes")
    regions = models.JSONField(blank=True, null=True, help_text="Optional list of regions/states")
    
    def __str__(self):
        return self.name


class ShippingRate(models.Model):
    shipping_method = models.ForeignKey(ShippingMethod, related_name='rates', on_delete=models.CASCADE)
    shipping_zone = models.ForeignKey(ShippingZone, related_name='rates', on_delete=models.CASCADE)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    min_order_value = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    max_order_value = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    
    class Meta:
        unique_together = ('shipping_method', 'shipping_zone', 'min_order_value')
    
    def __str__(self):
        return f"{self.shipping_method.name} - {self.shipping_zone.name}"
```

### Common App

```python
# common/models.py
from django.db import models

class TimestampedModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        abstract = True
```

## API Endpoints

### Authentication API

```
# Authentication Endpoints
POST   /api/auth/register/                  - Register a new user
POST   /api/auth/login/                     - Login and get token
POST   /api/auth/token/refresh/             - Refresh JWT token
POST   /api/auth/password/reset/            - Request password reset
POST   /api/auth/password/reset/confirm/    - Confirm password reset
GET    /api/auth/me/                        - Get current user profile
PUT    /api/auth/me/                        - Update user profile
GET    /api/auth/addresses/                 - List user addresses
POST   /api/auth/addresses/                 - Create new address
GET    /api/auth/addresses/{id}/            - Get specific address
PUT    /api/auth/addresses/{id}/            - Update address
DELETE /api/auth/addresses/{id}/            - Delete address
```

### Products API

```
# Products Endpoints
GET    /api/products/                      - List all products
GET    /api/products/{id}/                 - Get product details
POST   /api/products/                      - Create new product (admin)
PUT    /api/products/{id}/                 - Update product (admin)
DELETE /api/products/{id}/                 - Delete product (admin)

GET    /api/products/{id}/reviews/         - Get product reviews
POST   /api/products/{id}/reviews/         - Create product review
DELETE /api/products/{id}/reviews/{id}/    - Delete product review

GET    /api/categories/                    - List all categories
GET    /api/categories/{id}/               - Get category details
POST   /api/categories/                    - Create category (admin)
PUT    /api/categories/{id}/               - Update category (admin)
DELETE /api/categories/{id}/               - Delete category (admin)

GET    /api/products/search/               - Search products
```

### Orders API

```
# Cart Endpoints
GET    /api/cart/                          - Get current cart
POST   /api/cart/items/                    - Add item to cart
PUT    /api/cart/items/{id}/               - Update cart item
DELETE /api/cart/items/{id}/               - Remove item from cart
DELETE /api/cart/                          - Clear cart

# Orders Endpoints
GET    /api/orders/                        - List user orders
POST   /api/orders/                        - Create order from cart
GET    /api/orders/{id}/                   - Get order details
PUT    /api/orders/{id}/                   - Update order (admin)
DELETE /api/orders/{id}/                   - Cancel order

# Checkout Endpoint
POST   /api/checkout/                      - Process checkout
```

### Payments API

```
# Payment Endpoints
GET    /api/payments/methods/              - List available payment methods
POST   /api/payments/                      - Process payment
GET    /api/payments/{id}/                 - Get payment details
POST   /api/payments/{id}/refund/          - Request refund
GET    /api/payments/{id}/refund/          - Get refund status
```

### Shipping API

```
# Shipping Endpoints
GET    /api/shipping/methods/              - List shipping methods
GET    /api/shipping/methods/{id}/         - Get shipping method details
GET    /api/shipping/rates/                - Get shipping rates for address/cart
```

### Analytics API

```
# Analytics Endpoints (Admin only)
GET    /api/analytics/sales/               - Get sales analytics
GET    /api/analytics/products/            - Get product analytics
GET    /api/analytics/customers/           - Get customer analytics
GET    /api/analytics/inventory/           - Get inventory analytics
```

## Authentication & Security

### JWT Authentication

```python
# settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}
```

### Custom Permissions

```python
# common/permissions.py
from rest_framework import permissions

class IsAdminUser(permissions.BasePermission):
    """
    Allows access only to admin users.
    """
    def has_permission(self, request, view):
        return request.user and request.user.is_staff

class IsStaffOrReadOnly(permissions.BasePermission):
    """
    Allows read-only access to all users, but write access only to staff users.
    """
    def has_permission(self, request, view):
        return bool(
            request.method in permissions.SAFE_METHODS or
            request.user and request.user.is_staff
        )

class IsOwnerOrAdmin(permissions.BasePermission):
    """
    Object-level permission to only allow owners of an object or admins to edit it.
    """
    def has_object_permission(self, request, view, obj):
        return obj.user == request.user or request.user.is_staff
```

## Implementation Plan

### Phase 1: Core Foundation (2-3 weeks)

1. **Project Setup**
   - Initialize Django project
   - Configure database connection
   - Set up Docker environment (optional)
   - Configure JWT authentication

2. **User Management**
   - Implement User model
   - Implement authentication API
   - Create address management

3. **Product Catalog**
   - Implement Product and Category models
   - Create product listing and detail APIs
   - Implement search functionality

### Phase 2: E-commerce Functionality (3-4 weeks)

1. **Cart & Orders**
   - Develop cart functionality
   - Implement order creation and management
   - Create order tracking system

2. **Payment Processing**
   - Integrate payment gateway(s)
   - Implement payment processing flow
   - Add refund handling

3. **Shipping System**
   - Create shipping methods and zones
   - Implement shipping rate calculation
   - Add tracking number management

### Phase 3: Advanced Features & Optimization (2-3 weeks)

1. **Reviews & Ratings**
   - Implement product review system
   - Add rating calculation

2. **Analytics & Reporting**
   - Create analytics models
   - Implement reporting APIs

3. **Performance Optimization**
   - Add caching
   - Optimize database queries
   - Implement pagination

### Phase 4: Testing & Documentation (2 weeks)

1. **Testing**
   - Write unit tests
   - Conduct integration tests
   - Perform load testing

2. **Documentation**
   - Create API documentation
   - Write developer guides
   - Prepare user manuals

## Testing Strategy

### Unit Tests

```python
# products/tests.py
from django.test import TestCase
from rest_framework.test import APIClient
from rest_framework import status
from django.urls import reverse
from .models import Product, Category
from authentication.models import User

class ProductAPITestCase(TestCase):
    def setUp(self):
        self.client = APIClient()
        self.admin_user = User.objects.create_superuser(
            username='admin',
            email='admin@example.com',
            password='password'
        )
        self.client.force_authenticate(user=self.admin_user)
        
        self.category = Category.objects.create(name='Test Category')
        self.product_data = {
            'name': 'Test Product',
            'price': '99.99',
            'description': 'Test description',
            'sku': 'TST-001',
            'stock_quantity': 100,
            'categories': [self.category.id]
        }
        
    def test_create_product(self):
        response = self.client.post(
            reverse('product-list'),
            self.product_data,
            format='json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Product.objects.count(), 1)
        self.assertEqual(Product.objects.get().name, 'Test Product')
        
    def test_get_product_list(self):
        Product.objects.create(
            name='Test Product',
            price='99.99',
            description='Test description',
            sku='TST-001',
            stock_quantity=100
        )
        response = self.client.get(reverse('product-list'))
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data['results']), 1)
```

### Integration Testing

Use tools like Postman or custom integration test scripts to test complete workflows:
- Registration → Login → Product Browse → Add to Cart → Checkout → Payment
- Order Tracking → Return Request
- Admin Order Management

### Load Testing

Use tools like JMeter or Locust to test the API's performance under load:
- Simulate concurrent users
- Test high-traffic scenarios
- Identify bottlenecks

## Deployment Recommendations

### Development Environment
- Docker containers
- Local PostgreSQL database
- Redis for caching

### Staging Environment
- AWS, GCP, or Azure
- CI/CD pipeline
- Monitoring tools

### Production Environment
- Multi-zone cloud deployment
- Database replication
- Load balancing
- Monitoring and alerting
- Automatic backups
- CDN for static assets

### Security Measures
- HTTPS enforcement
- Rate limiting
- IP blocking
- Regular security audits
- PCI DSS compliance (for payment handling)